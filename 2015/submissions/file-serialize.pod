Title:  Garlands of YAML and JSON
Topic:  File::Serialize
Author: Yanick Champoux <yanick@cpan.org>

Some elves are working at Santa's Gift Factories for a Holidays season or two before they move to greener pastures. (Usually quite literaly greener, as the Easters Bunny is notoriously known to be the biggest elf poachers around)
But not Gluggagægir. Oh no. He is one of your long-term commitment type of elf. He's been around and worked in most departments, 
and expects to be around longer still, slowly moving up the yuletide ladder until -- know knows? -- he makes it as Cheers Chief Officer.

But those are long-term plans. For the moment, our dear Glugg is dealing with the most pressing task of making the
myriad of elf departments work together as seamlessly as possible.

Which is easier said than done, considering all the systems involved. 
To bounce information back and forth, the elves usually resort to serialize data in either YAML or JSON,
which are both readable and fairly easy to manipulate. That is perfectly fine with Glugg, as he's an old-hand to the 
serialization/deserialization dance. And happens to have one more handy tool on his belt for those tasks: L<File::Serialize>.

=head2 Keep it short, keep it sweet

The main raison d'être of L<File::Serialize> is to encapsulate and take care of all the boring,
repetitive details that come with serialization. Before, Glugg used to have two scripts that looked like

    use NorthPole::DB;

    use YAML;

    my $nice_children = YAML::LoadFile( 'nice.yaml' );

    update_db( nice => $nice_children );

and

    use NorthPole::DB;

    use JSON;
    use Path::Tiny;

    my $naughty_children = from_json path('naughty')->slurp;

    update_db( naughty => $naughty_children );

In other words, almost the same, except for the serialization engine. But with L<File::Serialize>, 
he now can just hide that difference under the blanket:

    
    use NorthPole::DB;

    use File::Serialize;

    my %list = (
        nice    => 'nice.yaml',
        naughty => 'naughty.json',
    );

    while ( my( $status, $file ) = each %list ) {
        update_db( $status => deserialize_file $file );
    }

And it goes the other way around as well. The module can also figure out
the right output format and deal with common options (pretty-printing, utf8 output, 
canonical representation).

    use NorthPole::DB;

    use File::Serialize { pretty => 1, canonical => 1, utf8 => 1 };

    my $children = query_db();

    my %report = (
        nice    => 'nice_out.yaml',
        naughty => 'naughty_out.json',
    );


    while ( my( $status, $file ) = each %list ) {
        serialize_file $file => [
            map { $_->behavior eq $status } @$children
        ];
    }

With, of course, always the possibility to explicitly chose 
a specific format, for those special cases.


    # TODO: have a chat with the Teddy Bear division 
    # about cutesy extensions...
    
   serialize_file 'teddy.hohoho' => [
        grep { $_->want eq 'teddy bear' } @$nice_children
   ], { format => 'json' };

    
=head2 Keep it magic, when you need to be l33t

And then there is the module's carefully guarded little hidden bonus:
it also has a function called C<transerialize_file>, which allows
to implements a small pipeline (or, in develfoper lingo, a garland) 
of transformations. For example, Glugg's real script is even shorter than
the snippets given above, and looks something like this:


    transerialize_file query_db()
        => { 'all_children.yml' => undef }
        => [
            [ 
                sub { [ grep { $_->behavior eq 'naughty' } @$_ ] } 
                    => 'naughty.json' 
            ],
            [
                sub { [ grep { $_->behavior eq 'nice' } @$_ ] } 
                    => { 'nice.json' => undef },
                    => sub { [ grep { $_->want eq 'teddy bear' } ] @$_ }
                    =>  { 'teddy.hohoho' => { format => 'json' } }
            ]
        ];


Short and efficient. That's how elves are, and that's how they like their code 
to be.
