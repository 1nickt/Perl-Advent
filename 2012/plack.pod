Title: Web done better!
Topic: PSGI/Plack

=head1 Remembering the horror

If you've done any web programming in Perl for more than a few years, you
probably know how difficult and annoying server-side web programming can be.
If you're new, just hold on to your hat for a few minutes.

=head1 So you want to write a server-side web application?

XXX: I'm not sure what you mean by "standalone-style."  Do you mean
framework-free, or a standalone HTTP daemon? Also, you use both "standalone"
and "stand-alone."  The OED does not have the former, so I've standardized on
the latter. -- rjbs, 2012-11-27

Welcome! How would you like to write your web application? Do you want to use
L<CGI.pm|CGI>, B<mod_perl>, L<FCGI>, L<Catalyst>, L<Jifty>? Maybe you want to
write it yourself, (stand-alone style). Each one supports something else. Each
server (Apache, Lighttpd, Nginx, etc.) supports some technologies but not
others.

You're probably beginning to see the problem. In web programming you're
basically marrying yourself to a specific server environment. Beyond
that, each framework usually settles on a specific server environment protocol,
whether it is CGI or mod_perl. Then, if the web server doesn't work, or if
you want to move to a different protocol, your web application needs rewriting.
Yay! Oh wait, no. That sucks.

=head1 Great artists are inspired

Picasso said that I<good artists copy, great artists steal>, but a better
paraphrase might be that great artists I<are inspired>. As such, Perl superhero
Tatsuhiko Miyagawa was inspired by specifications available in other languages
(Ruby's L<Rack|http://rack.github.com/>, Python's
L<WSGI|http://wsgi.readthedocs.org/en/latest/>) that provide an interface layer
between different server environment protocols.  He created Perl's L<PSGI>.

PSGI finally provides a clear specification for interfacing with different
layers. This effectively separates between the web application, the interface
(L<HTTP::Engine>, CGI, FCGI), and the web server (Apache, Nginx,
L<HTTP::Server::Simple>), which up until now were confused.

Do you want to write your application in L<Catalyst>? Maybe in L<Web::Simple>?
As long as they support the PSGI protocol, you can do that. Now you can deploy
them on any web server, use any technology (whether it's CGI, FastCGI, or
anything else), and even run them on stand-alone Perl web servers as a backend
to a reverse-proxy server (Nginx, Apache + mod_proxy, and so on).

PSGI comes with a reference implementation called L<Plack>, which includes a
range of utilities, and implementations for servers (under the Plack::Server
namespace).

=head1 Welcome to a Modern Perl web

All modern Perl web frameworks now support the PSGI protocol (L<Catalyst>,
L<Dancer>, L<Web::Simple>, L<Mojolicious>, L<Mason>, L<OX>, L<Tatsumaki>, and
more), and you can deploy on any web server, including Perl web servers
(L<Starman>, L<Starlet>, L<Twiggy>, L<Corona>).

PSGI also specifies different layers of action called I<middleware>, allowing
you to add blocks on top of your web application providing a range of services,
such as caching, privacy and authorization control, REPL, debugging screens,
session management and more.

=head1 The future seems bright

Now that we have PSGI/Plack, we can finally program in any web framework we
want without worrying about painting ourselves into a corner, limiting
ourselves with regards to the web server, the technology, and the platform. No
more!  The future is open, and web programming is so much better.

